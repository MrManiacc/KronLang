
/**
 * The module indicates the start of a "package"/object type of thing in kotlin. The next token is an identifier
 * for the module name. They can be used anywhere as a sort of name space. Modules can support variables, that are "static".
 * A module is similar to an "object" in kotlin except in the sense that you can reference it in multiple places,
 * statically and have references to all loaded classes on the class path "module"
 */
module system {

    /**This will print out string from java. its an extern so it's native java code that is mapped..**/
    extern fn print<line: String>

    /**This will print out string from java. its an extern so it's native java code that is mapped..**/
    extern fn println<line: String>

    /**This stores all of our internal language definitions**/
    @CoreModule<true> module ~.lang {
        /**Stores all of the annotations. We want to ignore the CoreModule as a core module because it shouldnt be one. **/
        @CoreModule<true, arraysOf<"CoreModule">> module ~.annotations {
            @Using <
                /**This can be null, but it is the module path of the import. You can also import in things such as
                 * Fields from other modules or methods, so long as you have the correct permissions. **/
                val moduleImport: String!
                /**This can also be imported from a module. It will first attempt to add on its own, (full path) if that fails
                 * it will then check against moduleImport by appends it's class name**/
                val classImport: String!
             > {
                /** This is the operator fntion for toString, the return type is :> String meaning it will return a string **/
                operate fn toString {
                    return ~.toString /** If there's no parameters for the fntion, we can simply map it as a sort of variable. **/
                }: String

                /**
                 * This is what is used to check if this is another, it can be primitives or anything.
                 */
                operate fn is<other: Obj!>{

                }: Bool
            }
        }

        /**
         * This is an internal use only annotation. Because anything marked with this is automatically mapped into the
         * the Path of the the loaded VirtualMachines inside the current loader program. We don't want this being exposed
         *
         * it will be extensible everywhere without the need to statically add it. This is very extensible.
         * The @class means this is an annotation and can be applied to a method, module.
         */
        intern @CoreModule <
            /** If the module will automatically be imported. This means for a class like [System.prims#Int] **/
            val map_classes_to_all_paths: bool ?= true,
            /** The "!" after the array definition indicates nullability. It can be omitted when setting to nil though**/
            exclude_classes: Array[Class[Obj]]! ?= nil,
            /** when true it will recursively add the core module **/
            recursive: Boolean
         > {
            /**
             * This is a built in operator fntion ,that we're overloading. It's going to take in a callback otherwise
             * known as a "Unit" in kotlin or a lambda in java. The return result is basically a void.
             */
            operate fn each<iterator: Class[Obj] :> fn> {
                val size = exclude_classes.size
                var index = 0
                while(index < size){
                    iterator<exclude_classes<index++>>
                }
            }
            /**
             * This is the operator fntion for toString, the return type is :> String meaning it will return a string
             */
            operate fn toString<> {
                return ^.toString /** If there's no parameters for the fntion, we can simply map it as a sort of variable.**/
            }: String

            /**
             * This is what is used to check if this is another, it can be primitives or anything.
             */
            operate fn is<other: Obj!>{

            }: Bool
        }


    }
}









